syntax = "proto3";
package conduit.core;

service Core {}

service Config {
  rpc Get (GetConfigRequest) returns (GetConfigResponse);
  rpc Configure (UpdateRequest) returns (UpdateResponse);
  rpc GetDeploymentState (Empty) returns (DeploymentState);
  rpc WatchDeploymentState (Empty) returns (stream DeploymentState);
  rpc RegisterModule (RegisterModuleRequest) returns (Empty);
  rpc ModuleHealthProbe(ModuleHealthRequest) returns (Empty);
  rpc GetServerConfig (Empty) returns (GetConfigResponse);
  rpc GetRedisDetails (Empty) returns (GetRedisDetailsResponse);
  rpc GetModuleUrlByName (ModuleByNameRequest) returns (ModuleByNameResponse);
}

message DeploymentState {
  message ModuleStateInfo {
    string moduleName = 1;
    string moduleVersion = 2;
    string moduleUrl = 3;
    bool pending = 4;
    bool serving = 5;
  }
  repeated ModuleStateInfo modules = 1;
}

service Admin {
  rpc GenerateProto(GenerateProtoRequest) returns (GenerateProtoResponse);
  rpc RegisterAdminRoute (RegisterAdminRouteRequest) returns (Empty);
}

message GenerateProtoRequest {
  string moduleName = 1;
  repeated string routes = 2;
}

message GenerateProtoResponse {
  string protoFile = 1;
  string formattedModuleName = 2;
}

message RegisterAdminRouteRequest {
  repeated PathDefinition routes = 1;
  string protoFile = 2;
  optional string routerUrl = 3;

  message PathDefinition {
    ConduitRouteOptions options = 1;
    optional ConduitRouteReturnDefinition returns = 2;
    optional string grpcFunction = 3;
    optional bool isMiddleware = 4;
    optional string events = 5;
  }

  message ConduitRouteOptions {
    optional string queryParams = 1;
    optional string bodyParams = 2;
    optional string urlParams = 3;
    optional string action = 4;
    string path = 5;
    optional string name = 6;
    optional string description = 7;
    repeated string middlewares = 8;
    optional string cacheControl = 9;
  }

  message ConduitRouteReturnDefinition {
    string name = 1;
    string fields = 2;
  }
}

message Empty {}

message ModuleHealthRequest {
  string moduleName = 1;
  string moduleVersion = 2;
  string moduleUrl = 3;
  int32 status = 4; // [0, 1, 2]
}

message ModuleByNameRequest {
  string name = 1;
}

message ModuleByNameResponse {
  string moduleUrl = 1;
}

message RegisterModuleRequest {
  message ConduitManifest {
    message Dependency {
      string name = 1;
      string version = 2;
    }
    string moduleName = 1;
    string moduleVersion = 2;
    repeated Dependency dependencies = 3;
  }

  ConduitManifest manifest = 1;
  string url = 3;
  int32 healthStatus = 4; // [0, 1, 2]
}

message GetConfigRequest {
  string key = 1;
}


message GetRedisDetailsResponse {
    optional string redisHost = 1;
    optional int32 redisPort = 2;
    optional string redisUsername = 3;
    optional string redisPassword = 4;
    optional string redisConfig = 5;
}

message GetConfigResponse {
  string data = 1;
}

message UpdateRequest {
  string config = 1;
  string schema = 2;
  bool override = 3;
}

message UpdateResponse {
  string result = 1;
}

message RegisterModulesConfigRequest {
  string newModulesConfigSchema = 1;
}
