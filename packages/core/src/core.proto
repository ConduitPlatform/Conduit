syntax = "proto3";
package conduit.core;

service Core {}

service Admin {
  rpc RegisterAdminRoute (RegisterAdminRouteRequest) returns (Empty);
}

service Router {
  rpc RegisterConduitRoute (RegisterConduitRouteRequest) returns (Empty);
  rpc SocketPush (SocketData) returns (Empty);
}

message SocketData {
  string event = 1;
  string data = 2;
  repeated string receivers = 3;
  repeated string rooms = 4;
}

message RegisterAdminRouteRequest {
  repeated PathDefinition routes = 1;
  string protoFile = 2;
  optional string routerUrl = 3;

  message PathDefinition {
    ConduitRouteOptions options = 1;
    optional ConduitRouteReturnDefinition returns = 2;
    optional string grpcFunction = 3;
    optional bool isMiddleware = 4;
    optional string events = 5;
  }

  message ConduitRouteOptions {
    optional string queryParams = 1;
    optional string bodyParams = 2;
    optional string urlParams = 3;
    optional string action = 4;
    string path = 5;
    optional string name = 6;
    optional string description = 7;
    repeated string middlewares = 8;
    optional string cacheControl = 9;
  }

  message ConduitRouteReturnDefinition {
    string name = 1;
    string fields = 2;
  }
}

message RegisterConduitRouteRequest {
  repeated PathDefinition routes = 1;
  string protoFile = 2;
  optional string routerUrl = 3;

  message PathDefinition {
    ConduitRouteOptions options = 1;
    optional ConduitRouteReturnDefinition returns = 2;
    optional string grpcFunction = 3;
    optional bool isMiddleware = 4;
    optional string events = 5;
  }

  message ConduitRouteOptions {
    optional string queryParams = 1;
    optional string bodyParams = 2;
    optional string urlParams = 3;
    optional string action = 4;
    string path = 5;
    optional string name = 6;
    optional string description = 7;
    repeated string middlewares = 8;
    optional string cacheControl = 9;
  }

  message ConduitRouteReturnDefinition {
    string name = 1;
    string fields = 2;
  }
}

message Empty {
}
